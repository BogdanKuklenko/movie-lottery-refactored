Critical Fix: Resolve Memory & Timeout Issues on Render

Fixed severe production issues causing worker timeouts and OOM kills:

Changes:
- Remove db.create_all() from app initialization (was causing slow startup)
- Optimize SQLAlchemy connection pool (pool_size=1, max_overflow=0)
- Increase gunicorn timeout to 300s for slow free-tier startup
- Reduce worker_connections from 1000 to 100 (memory optimization)
- Reduce max_requests from 1000 to 500 (more frequent worker recycling)
- Add /health endpoint for Render monitoring

Impact:
- Expected memory usage: 150-250 MB (down from 400-600 MB)
- Expected startup time: 10-15 seconds (was timing out at 30-60s)
- Prevents worker OOM kills on resource-constrained environments

Breaking Change:
- Database tables are no longer auto-created on startup
- Run 'python init_db.py' once after deployment to initialize DB

Action Required After Deployment:
- Update Render start command to: gunicorn --config gunicorn_config.py "movie_lottery:create_app()"
- Initialize database using: python init_db.py

Fixes: Worker timeout and OOM kill issues on Render deployment
See: EMERGENCY_FIX_RENDER.md and RENDER_DASHBOARD_STEPS.txt for detailed instructions

