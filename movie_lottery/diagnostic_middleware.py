"""
Diagnostic Middleware - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ª–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
–í—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç –ø–∞–º—è—Ç—å
"""

import os
import sys
import time
import logging
import socket

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='[DIAGNOSTIC] %(message)s',
    stream=sys.stdout
)
logger = logging.getLogger(__name__)

class StartupDiagnostics:
    """–ö–ª–∞—Å—Å –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.start_time = time.time()
        self.checkpoints = []
        self.start_memory = self._get_memory_mb()
        
    def _get_memory_mb(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ MB"""
        try:
            import psutil
            process = psutil.Process(os.getpid())
            return process.memory_info().rss / 1024 / 1024
        except ImportError:
            # psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            return 0
    
    def checkpoint(self, name):
        """–ó–∞–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Ç–æ—á–∫—É"""
        elapsed = time.time() - self.start_time
        memory = self._get_memory_mb()
        memory_delta = memory - self.start_memory
        
        self.checkpoints.append({
            'name': name,
            'time': elapsed,
            'memory': memory,
            'delta': memory_delta
        })
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ä–∞–∑—É
        status = "OK"
        if elapsed > 10:
            status = "SLOW"
        if memory > 400:
            status = "HIGH_MEMORY"
            
        logger.info(f"[{status}] {name:40} | {elapsed:6.2f}s | {memory:7.1f} MB | +{memory_delta:6.1f} MB")
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if elapsed > 20:
            logger.warning(f"‚ö†Ô∏è  Checkpoint '{name}' took {elapsed:.1f}s - approaching timeout!")
        if memory > 400:
            logger.warning(f"‚ö†Ô∏è  Memory usage {memory:.0f} MB - approaching 512 MB limit!")
    
    def print_summary(self):
        """–í—ã–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É"""
        total_time = time.time() - self.start_time
        final_memory = self._get_memory_mb()
        
        logger.info("=" * 80)
        logger.info("DIAGNOSTIC SUMMARY:")
        logger.info(f"  Total startup time: {total_time:.2f}s")
        logger.info(f"  Final memory: {final_memory:.1f} MB")
        logger.info(f"  Memory growth: +{final_memory - self.start_memory:.1f} MB")
        logger.info("=" * 80)
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        if total_time > 30:
            logger.error("üö® CRITICAL: Startup time > 30s - will cause worker timeout!")
            logger.error("    Solution: Ensure gunicorn timeout is set to 300s")
        
        if final_memory > 450:
            logger.error("üö® CRITICAL: Memory > 450 MB - may cause OOM on free tier!")
            logger.error("    Solution: Optimize imports or upgrade plan")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_diagnostics = None

def start_diagnostics():
    """–ù–∞—á–∞—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É"""
    global _diagnostics
    if os.environ.get('RENDER') or os.environ.get('ENABLE_DIAGNOSTICS'):
        logger.info("=" * 80)
        logger.info("üîç STARTUP DIAGNOSTICS ENABLED")
        logger.info(f"   Python: {sys.version}")
        logger.info(f"   Platform: {sys.platform}")
        logger.info(f"   PID: {os.getpid()}")
        logger.info(f"   DATABASE_URL: {'Set' if os.environ.get('DATABASE_URL') else 'Not Set'}")
        logger.info("=" * 80)
        _diagnostics = StartupDiagnostics()
        _diagnostics.checkpoint("Diagnostics initialized")
    return _diagnostics

def checkpoint(name):
    """–ó–∞–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Ç–æ—á–∫—É"""
    if _diagnostics:
        _diagnostics.checkpoint(name)

def finish_diagnostics():
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É"""
    if _diagnostics:
        _diagnostics.print_summary()

